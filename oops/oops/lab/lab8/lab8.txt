\documentclass[12pt]{article}
\usepackage[a4paper, margin=1in]{geometry}
\usepackage{listings}
\usepackage{xcolor}
\usepackage{hyperref}
\usepackage{titlesec}
\usepackage{fancyhdr}
\usepackage{parskip}
\usepackage{setspace}
\usepackage{amsmath}
\usepackage{tcolorbox} % for code boxes

\pagestyle{fancy}
\fancyhf{}
\rhead{Navdeep Singh}
\lhead{OOP Assignment 8}
\rfoot{Page \thepage}

\titleformat{\section}{\large\bfseries}{\thesection}{1em}{}

\definecolor{codegray}{rgb}{0.5,0.5,0.5}

\lstdefinestyle{cpp}{
    backgroundcolor=\color{white},
    commentstyle=\color{codegray},
    keywordstyle=\color{blue},
    numberstyle=\tiny\color{gray},
    stringstyle=\color{red},
    basicstyle=\ttfamily\footnotesize,
    breaklines=true,
    numbers=left,
    numbersep=10pt,       % space between number and code
    xleftmargin=15pt,     % left margin so numbers don't overlap box
    showstringspaces=false,
    tabsize=2,
    language=C++
}


\tcbset{
    colback=white,
    colframe=black,
    left=1mm,
    right=1mm,
    top=1mm,
    bottom=1mm,
    boxsep=1mm,
    arc=1mm
}

\begin{document}

% Assignment Header
\begin{center}
    {\LARGE \bfseries Assignment 8: [Assignment Name]} \\
    \vspace{0.2cm}
    {\large Submitted by: Navdeep Singh} \\
    Roll No: 24124073 \\
    Group: 3 \\
    Branch: Information Technology \\
    Year: 2nd Year
\end{center}

\vspace{0.5cm} % small space before questions

%----------------------------------------
\section*{Q1. Program to Overload Unary Operator}
\subsection*{Code}
\begin{tcolorbox}
\begin{lstlisting}[style=cpp]
#include<bits/stdc++.h>
using namespace std;

class Number{
    int x;
    public:
    Number(){}
    Number(int val){
        x = val;
    }
    Number operator -(){ // unary operator overloading
        Number temp;
        temp.x = -x;
        return temp;
    }
    void display(){
        cout<<x<<endl;
    }
    friend ostream& operator<<(ostream& os, const Number& n);
    friend istream& operator>>(istream& is, Number& n);
};

ostream& operator<<(ostream& os, const Number& n) {
    os << n.x;
    return os;
}

istream& operator>>(istream& is, Number& n) {
    is >> n.x;
    return is;
}

int main(){
    Number n1(5),n2;
    n2 = -n1; // unary operator
    cout<<n1<<endl;
    cout<<n2<<endl;
    return 0;
}
\end{lstlisting}
\end{tcolorbox}

\subsection*{Sample Output}
\begin{tcolorbox}
\begin{lstlisting}[style=cpp]
5
-5
\end{lstlisting}
\end{tcolorbox}

%----------------------------------------
\section*{Q2. Program to show Hybrid Inheritance}
\subsection*{Code}
\begin{tcolorbox}
\begin{lstlisting}[style=cpp]
class A{
    public:
    void showA(){
        cout<<"Class A"<<endl;
    }
};

class B:public A{
    public:
    void showB(){
        cout<<"Class B"<<endl;
    }
};

class C: public A{
    public:
    void showC(){
        cout<<"Class C"<<endl;
    }
};

class D:public B,public C{
    public:
    void showD(){
        cout<<"Class D"<<endl;
    }
};

int main(){
    D obj;
    obj.B::showA(); // resolve ambiguity
    obj.C::showA(); // resolve ambiguity
    obj.showB();
    obj.showC();
    obj.showD();
    return 0;
}
\end{lstlisting}
\end{tcolorbox}

\subsection*{Sample Output}
\begin{tcolorbox}
\begin{lstlisting}[style=cpp]
Class A
Class A
Class B
Class C
Class D
\end{lstlisting}
\end{tcolorbox}

\end{document}
